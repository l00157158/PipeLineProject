name: CI/CD Pipeline

on:
  push:
    branches: [ master ]


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Maven
        run: mvn clean package
        working-directory: ./prj
      - name: Upload target directory
        uses: actions/upload-artifact@v2
        with:
          name: target
          path: prj/target

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Test with Maven
        run: mvn test
        working-directory: ./prj
      #-------------------------------------------------------------
      # SonarQube analysis steps
      - name: Cache SonarCloud packages
        uses: actions/cache@v2
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: SonarQube Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=l00157158_PipeLineProject -Dsonar.host.url=https://sonarcloud.io -Dsonar.organization=l00157158 -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        working-directory: ./prj
      #-------------------------------------------------------------
  docker_push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download target directory
        uses: actions/download-artifact@v2
        with:
          name: target
          path: prj/target
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/myapp01:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/myapp01:latest
        working-directory: ./prj

  deploy_to_ec2:
    needs: docker_push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/myapp01:latest
            docker stop app-container || true
            docker rm app-container || true
            docker run -d --name app-container --rm -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/myapp01:latest

  postman_test:
    needs: deploy_to_ec2
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run Postman Tests
        run: newman run prj/PipeLine-Prj.postman_collection.json
